#!/bin/bash
#
# This tool rewrites the origin URL of all repositories in a specific folder.
#
# Maintainer: Nick Pleatsikas <nick@pleatsikas.me>

rewrite_and_push () {
  local folder="$1"
  local regex="$2"

  pushd "$PWD" > /dev/null 2>&1 || return
  cd "$folder" || return

  if [[ ! -d ".git/" ]]; then
    popd > /dev/null 2>&1 || return
    return
  fi

  new_url="$(git config --get remote.origin.url | sed "$regex")"
  git remote set-url origin "$new_url"

  git push --all --tags origin

  popd > /dev/null 2>&1 || return
}

get_cli_value () {
  IFS="=" read -ra values <<< "$1"
  if [[ "${#values[@]}" -lt 2 ]]; then
    >&2 echo "No value for arg:${values[0]} provided."
    kill -9 $$
  fi

  echo "${values[1]}"
}

usage () {
  cat << EOF
Usage: rewrite-remotes FOLDER --rewrite=REGEX [--help | -h]
  Rewrite origin of repositories in containing FOLDER.
  
  Options:
      --rewrite=REGEX   Regex used to replace origin of repositories.
  -h  --help            Show this window.
EOF
}

main () {
  # Variables
  local regex
  local input

  if [[ $# -lt 1 ]]; then
    usage
    exit
  elif [[ $1 == "--help" ]]; then
    usage
    exit
  elif [[ $1 == "--"* ]]; then
    >&2 echo "No input directory provided"
    exit 1
  fi

  # Get output directory.
  IFS="/" read -ra DIR_PATH <<< "$1"
  if [[ $1 = "${DIR_PATH[0]}"* ]] && [[ -n "${DIR_PATH[0]}" ]]; then
    input="$(pwd)/$1"
  else
    input="$1"
  fi

  shift

  # Parse command line args.
  while [[ $# -ne 0 ]]; do
    case "$1" in
      --rewrite=*)
        regex="$(get_cli_value "$1")"
        ;;
      --help | -h)
        usage
        exit
        ;;
      *)
        echo "Unknown argument $1"
        exit 1
        ;;
    esac
    shift
  done

  if [[ -z "$regex" ]]; then
    >&2 echo "Rewrite argument not provided"
    exit 1
  fi

  pushd "$PWD" > /dev/null 2>&1 || return
  cd "$input" || return

  for dir in */; do
    rewrite_and_push "$dir" "$regex"
  done

  popd > /dev/null 2>&1 || return
}

main "$@" 
